import React from "react";
// nodejs library that concatenates classes
import classNames from "classnames";
// @material-ui/core components
import { makeStyles } from "@material-ui/core/styles";
// @material-ui/icons
import CustomInput from "/components/CustomInput/CustomInput.js";
import Camera from "@material-ui/icons/Camera";
import Palette from "@material-ui/icons/Palette";
import Favorite from "@material-ui/icons/Favorite";
// core components
import Header from "/components/Header/Header.js";
import Footer from "/components/Footer/Footer.js";
import Button from "/components/CustomButtons/Button.js"
import GridContainer from "/components/Grid/GridContainer.js";
import GridItem from "/components/Grid/GridItem.js";
import HeaderLinks from "/components/Header/HeaderLinks.js";
import NavPills from "/components/NavPills/NavPills.js";
import Parallax from "/components/Parallax/Parallax.js";

import styles from "/styles/jss/nextjs-material-kit/pages/profilePage.js";
import useSWR from 'swr'
import Link from "next/link";

import Input from '@material-ui/core/Input';
import InputLabel from '@material-ui/core/InputLabel';
import FormHelperText from '@material-ui/core/FormHelperText';
import FormControl from '@material-ui/core/FormControl';
import TextField from '@material-ui/core/TextField';

// import React from 'react';
import ReactDOM from 'react-dom';
import { Formik, Field, Form, useField, handleSubmit, useFormikContext } from 'formik';
import * as yup from 'yup';
import axios from 'axios';
// import Button from '@material-ui/core/Button';

const EditProfile = () => {

  const useStyles = makeStyles(styles);

  const classes = useStyles(); // Define classes here

  const fetcher = url => fetch(url).then(res => res.json())


const validationSchema = yup.object({
  name: yup.string().required('Name is required'),
  email: yup.string().email('Email is invalid').required('Email is required'),
  message: yup.string().required('Message is required'),
  profilePhoto: yup.mixed().required('Profile photo is required'),
});

// export default function EditProfile() {
// const classes = useStyles();
// const { data, error } = useSWR('/api/user', fetcher)

// if (error) return <div>Failed to load user data</div>

// if (!data) return <div>Loading...</div>

// const { user } = data

  //... other code...
  const handleSubmit = async (values, { setSubmitting }) => {
    const formData = new FormData();
    formData.append("name", values.name);
    formData.append("email", values.email);
    formData.append("bio", values.bio);
    formData.append("image", values.image);
  
    try {
      const response = await axios.post("/api/update-user", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
  
      console.log(response.data);
      setSubmitting(false);
  
      // Refetch the user data after updating it
      await fetcher("/api/user");
    } catch (error) {
      console.error(error);
      setSubmitting(false);
    }
  };

  return (
    <div>
      <Header
        color="transparent"
        brand="NextJS Material Kit"
        rightLinks={<HeaderLinks />}
        fixed
      />
      <Parallax small filter image="/img/bg-profile-c.jpg"/>
      <div className={classNames(classes.main, classes.mainRaised)}>
        <div className={classes.container}>
          <div className={classes.section}>
            <GridContainer justify="center">
              <GridItem cs={12} sm={12} md={8}>
                <h2 className="title">Edit Profile</h2>
                <Formik
                  initialValues={{ name: '', email: '', bio: '', image: null }}
                  validationSchema={validationSchema}
                  onSubmit={handleSubmit}
                    // axios.post('/api/update-user', values)
                    //     .then((response) => {
                    //     console.log(response.data);
                    //     setSubmitting(false);
                    //     })
                    //     .catch((error) => {
                    //     console.error(error);
                    //     setSubmitting(false);
                    //     });
                    // }}
                //     // handle form submission here
                //     const formData = new FormData();
                //     formData.append('name', values.name);
                //     formData.append('email', values.email);
                //     formData.append('bio', values.bio);
                //     formData.append('image', values.image);

                //     fetch("/api/update-user", {
                //       method: 'POST',
                //       body: formData,
                //     })
                //       .then((response) => response.json())
                //       .then((data) => {
                //         console.log(data);
                //         setSubmitting(false);
                //       })
                //       .catch((error) => {
                //         console.error(error);
                //         setSubmitting(false);
                //       });
                //   }}
                >
                  {({ isSubmitting, setFieldValue }) => (
                    <Form onSubmit={handleSubmit}>
                      <GridContainer>
                        <GridItem xs={12} sm={12} md={6}>
                          <Field
                            as={TextField}
                            name="name"
                            label="Your Name"
                            fullWidth
                            required
                          />
                        </GridItem>
                        <GridItem xs={12} sm={12} md={6}>
                          <Field
                            as={TextField}
                            name="email"
                            label="Your Email"
                            fullWidth
                            required
                          />
                        </GridItem>
                        <GridItem xs={12} sm={12} md={12}>
                          <Field
                            as={TextField}
                            name="message"
                            label="Your Message"
                            fullWidth
                            multiline
                            rows={5}
                            required
                          />
                        </GridItem>
                        <GridItem xs={12} sm={12} md={6}>
                        <FormControl className={classes.formControl}>
                            <InputLabel htmlFor="profile-image-input">Profile Image</InputLabel>
                            <Input
                            id="profile-image-input"
                            type="file"
                            inputProps={{
                                accept: 'image/*',
                            }}
                            />
                            {/* <FormHelperText>
                            <Button
                                variant="contained"
                                color="primary"
                                component="span"
                                className={classes.button}
                                startIcon={<Camera />}
                            >
                                Update Profile Image
                            </Button>
                            </FormHelperText> */}
                        </FormControl>
                        </GridItem>
                      </GridContainer>
                      <GridContainer justify="center" >
                        <GridItem xs={12} md={12}>
                            <Button type="submit" color="primary">
                                Submit
                            </Button>
                        </GridItem>
                      </GridContainer>
                    </Form>
                  )}
                </Formik>
              </GridItem>
            </GridContainer>
          </div>
        </div>
      </div>
    </div>
  );
}

export default EditProfile;